{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HorchiAbla\\\\Desktop\\\\dashboard1\\\\src\\\\pages\\\\testCSV\\\\TestCSV.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport { parse } from \"papaparse\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TablePagination from '@material-ui/core/TablePagination';\n\nconst TestCSV = () => {\n  _s();\n\n  const [offres, setOffres] = React.useState([]);\n  const [data, setData] = React.useState({\n    error: '',\n    result: \"\",\n    temp: [],\n    error: null\n  });\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n\n  const StyledTableCell = withStyles(theme => ({\n    head: {\n      backgroundColor: theme.palette.common.white,\n      color: theme.palette.common.black\n    },\n    body: {\n      fontSize: 14\n    }\n  }))(TableCell);\n  const StyledTableRow = withStyles(theme => ({\n    root: {\n      '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover\n      }\n    }\n  }))(TableRow);\n  const useStyles = makeStyles({\n    table: {\n      minWidth: 400,\n      marginTop: 20\n    }\n  });\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        marginLeft: \"20px\"\n      },\n      children: \" Import offers from CSV\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      style: {\n        backgroundColor: \"#008037\",\n        marginLeft: \"20px\"\n      },\n      onDragOver: e => {\n        e.preventDefault();\n      },\n      onDrop: e => {\n        let result = \"\";\n        e.preventDefault();\n        console.log(e.dataTransfer.files); // Array.from(e.dataTransfer.files).filter(\n        //     (files) => files.type === \"application/vnd.ms-excel\"\n        // ).forEach(async (file) => {\n        //     const text = await file.text();\n        //    result= parse(text),\n        //   console.log(result);\n        // });\n      },\n      children: \" import the file \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TestCSV, \"yN10jXbz1bLmVPmPOK3NX6bLIkI=\", true);\n\n_c = TestCSV;\nexport default TestCSV;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestCSV\");","map":{"version":3,"sources":["C:/Users/HorchiAbla/Desktop/dashboard1/src/pages/testCSV/TestCSV.js"],"names":["React","useState","Button","parse","Table","TableBody","TableCell","TableHead","withStyles","makeStyles","TableRow","Paper","TableContainer","TablePagination","TestCSV","offres","setOffres","data","setData","error","result","temp","page","setPage","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","target","value","StyledTableCell","theme","head","backgroundColor","palette","common","white","color","black","body","fontSize","StyledTableRow","root","action","hover","useStyles","table","minWidth","marginTop","classes","marginLeft","e","preventDefault","console","log","dataTransfer","files"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nimport { parse } from \"papaparse\";\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\nconst TestCSV = () => {\r\n\r\n    const [offres, setOffres] = React.useState([]);\r\n    const [data, setData] = React.useState({\r\n        error: '',\r\n        result: \"\",\r\n        temp: [],\r\n        error: null,\r\n\r\n\r\n    });\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n    const StyledTableCell = withStyles((theme) => ({\r\n        head: {\r\n            backgroundColor: theme.palette.common.white,\r\n            color: theme.palette.common.black,\r\n        },\r\n        body: {\r\n            fontSize: 14,\r\n        },\r\n    }))(TableCell);\r\n    const StyledTableRow = withStyles((theme) => ({\r\n        root: {\r\n            '&:nth-of-type(odd)': {\r\n                backgroundColor: theme.palette.action.hover,\r\n            },\r\n        },\r\n    }))(TableRow);\r\n\r\n\r\n\r\n    const useStyles = makeStyles({\r\n        table: {\r\n            minWidth: 400,\r\n            marginTop: 20,\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <h3 style={{ marginLeft: \"20px\" }} > Import offers from CSV</h3>\r\n            <Button\r\n                style={{ backgroundColor: \"#008037\", marginLeft: \"20px\" }}\r\n\r\n\r\n                onDragOver={(e) => {\r\n                    e.preventDefault();\r\n\r\n                }}\r\n                onDrop={(e) => {\r\n                    let result=\"\";\r\n\r\n                    e.preventDefault();\r\n                    console.log(e.dataTransfer.files);\r\n                    // Array.from(e.dataTransfer.files).filter(\r\n                    //     (files) => files.type === \"application/vnd.ms-excel\"\r\n                    // ).forEach(async (file) => {\r\n                    //     const text = await file.text();\r\n                    //    result= parse(text),\r\n                    //   console.log(result);\r\n\r\n                    // });\r\n                }}\r\n            > import the file </Button>\r\n            {/* <div>\r\n                <paper>\r\n                    <TableContainer>\r\n                        <Table className={classes.table}>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <StyledTableCell>id</StyledTableCell>\r\n                                    <StyledTableCell>nom</StyledTableCell>\r\n                                    <StyledTableCell>image</StyledTableCell>\r\n                                    <StyledTableCell>PriceBefore</StyledTableCell>\r\n                                    <StyledTableCell>PriceAfter</StyledTableCell>\r\n                                    <StyledTableCell>discount</StyledTableCell>\r\n                                    <StyledTableCell>description</StyledTableCell>\r\n                                    <StyledTableCell>restaurant_id</StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {data.result.map((item, id) => {\r\n                                    return (\r\n                                        <StyledTableRow hover role=\"checkbox\">\r\n                                            <StyledTableCell >\r\n                                                {item.id}\r\n\r\n                                            </StyledTableCell >\r\n                                            <StyledTableCell align=\"right\">\r\n                                                {item.nom}\r\n                                            </StyledTableCell >\r\n                                            <StyledTableCell align=\"right\">\r\n                                                {item.image}\r\n                                            </StyledTableCell >\r\n                                            <StyledTableCell align=\"right\">\r\n                                                {item.PriceBefore}\r\n                                            </StyledTableCell >\r\n                                            <StyledTableCell align=\"right\">\r\n                                                {item.PriceAfter}\r\n                                            </StyledTableCell >\r\n                                            <StyledTableCell align=\"right\">\r\n                                                {item.discount}\r\n                                            </StyledTableCell >\r\n                                            <StyledTableCell align=\"right\">\r\n                                                {item.description}\r\n                                            </StyledTableCell >\r\n                                            <StyledTableCell align=\"right\">\r\n                                                {item.restaurant_id}\r\n                                            </StyledTableCell >\r\n\r\n                                        </StyledTableRow>\r\n                                    )\r\n                                })\r\n\r\n                                }\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    {/* <TablePagination\r\n                        rowsPerPageOptions={[10, 25, 100]}\r\n                        component=\"div\"\r\n                        count={data.data.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onChangePage={handleChangePage}\r\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    /> */}\r\n                {/* </paper>\r\n            </div> */} \r\n\r\n        </div>\r\n\r\n    )\r\n};\r\nexport default TestCSV;\r\n"]},"metadata":{},"sourceType":"module"}