{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HorchiAbla\\\\Desktop\\\\dashboard1\\\\src\\\\components\\\\Cards\\\\WeatherCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { capitalize, getWeather, getWeatherIcon, windDirection } from '../../helpers';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport CallMadeIcon from '@material-ui/icons/CallMade';\nimport CallReceivedIcon from '@material-ui/icons/CallReceived';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport classNames from 'classnames';\nimport format from 'date-fns/format';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  flip: {\n    transform: 'rotate(-90deg)'\n  },\n  weatherBackground: {\n    backgroundColor: theme.palette.primary.main\n  },\n  weatherDetails: {\n    color: theme.palette.primary.contrastText\n  },\n  weatherIcon: {\n    fontSize: 26\n  }\n}));\n\nconst getWindDirection = (degree, classes) => {\n  const direction = windDirection(degree);\n\n  switch (direction) {\n    case 'n':\n      return /*#__PURE__*/_jsxDEV(ArrowUpwardIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 14\n      }, this);\n\n    case 'ne':\n      return /*#__PURE__*/_jsxDEV(CallMadeIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 14\n      }, this);\n\n    case 'e':\n      return /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 14\n      }, this);\n\n    case 'se':\n      return /*#__PURE__*/_jsxDEV(CallReceivedIcon, {\n        className: classes.flip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }, this);\n\n    case 's':\n      return /*#__PURE__*/_jsxDEV(ArrowDownwardIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 14\n      }, this);\n\n    case 'sw':\n      return /*#__PURE__*/_jsxDEV(CallReceivedIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 14\n      }, this);\n\n    case 'w':\n      return /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 14\n      }, this);\n\n    case 'nw':\n      return /*#__PURE__*/_jsxDEV(CallMadeIcon, {\n        className: classes.flip\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 14\n      }, this);\n\n    default:\n      break;\n  }\n};\n\nconst WeatherCard = ({\n  city,\n  country,\n  days\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [current, setCurrent] = useState(undefined);\n  const [forecast, setForecast] = useState(undefined);\n  useEffect(() => {\n    (async function () {\n      try {\n        const forecast = await getWeather(city, country, days);\n\n        if (forecast) {\n          const current = forecast.list[0];\n          setCurrent(current);\n          setForecast(forecast);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [city, country, days]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [current && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 0,\n          direction: 'row',\n          justify: 'space-between',\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: [forecast && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              children: `${forecast.city.name}, ${forecast.city.country}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              children: format(current.dt * 1000, 'MMMM Do yyyy, h:mm:ss a')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              children: capitalize(current.weather[0].description)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            className: \"text-xs-right\",\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h4\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: current.main.temp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          alignItems: 'center',\n          direction: 'row',\n          justify: 'space-between',\n          className: \"my-1\",\n          children: Object.keys(current.main).map((key, index) => /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              spacing: 0,\n              alignItems: 'center',\n              direction: 'row',\n              justify: 'space-between',\n              children: [/*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: capitalize(key.replace(/_/g, ' '))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 131,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 130,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                item: true,\n                children: /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    children: current.main[key]\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 136,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 134,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n        className: classes.weatherBackground,\n        children: forecast && /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 0,\n          alignItems: 'center',\n          direction: 'row',\n          justify: 'space-between',\n          className: \"text-xs-center\",\n          children: forecast.list.map((day, index) => index !== 0 && /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"caption\",\n            className: classes.weatherDetails,\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"block\",\n              children: day.weather.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"block py-xs\",\n              children: getWindDirection(day.wind.deg, classes)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"block pb-xs\",\n              children: format(current.dt * 1000, 'ddd')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"block pb-xs\",\n              children: /*#__PURE__*/_jsxDEV(\"i\", {\n                className: classNames(getWeatherIcon(day.weather[0].icon), classes.weatherIcon)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 27\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              className: \"block pb-xs\",\n              children: [`${day.main.temp}`, \" \\xB0\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 25\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 23\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), !current && !forecast && /*#__PURE__*/_jsxDEV(CardContent, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"Weather Data Not Loaded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherCard, \"fN7ye7RzWMWms7tssQKHuiXQ1QA=\", false, function () {\n  return [useStyles];\n});\n\n_c = WeatherCard;\nWeatherCard.propTypes = {\n  city: PropTypes.string,\n  country: PropTypes.string,\n  days: PropTypes.number\n};\nexport default WeatherCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherCard\");","map":{"version":3,"sources":["C:/Users/HorchiAbla/Desktop/dashboard1/src/components/Cards/WeatherCard.js"],"names":["React","useEffect","useState","capitalize","getWeather","getWeatherIcon","windDirection","ArrowBackIcon","ArrowDownwardIcon","ArrowForwardIcon","ArrowUpwardIcon","CallMadeIcon","CallReceivedIcon","Card","CardContent","Grid","PropTypes","Typography","classNames","format","makeStyles","useStyles","theme","flip","transform","weatherBackground","backgroundColor","palette","primary","main","weatherDetails","color","contrastText","weatherIcon","fontSize","getWindDirection","degree","classes","direction","WeatherCard","city","country","days","current","setCurrent","undefined","forecast","setForecast","list","e","console","error","name","dt","weather","description","temp","Object","keys","map","key","index","replace","day","wind","deg","icon","propTypes","string","number"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  capitalize,\n  getWeather,\n  getWeatherIcon,\n  windDirection\n} from '../../helpers';\n\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport CallMadeIcon from '@material-ui/icons/CallMade';\nimport CallReceivedIcon from '@material-ui/icons/CallReceived';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport classNames from 'classnames';\nimport format from 'date-fns/format';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  flip: {\n    transform: 'rotate(-90deg)'\n  },\n  weatherBackground: {\n    backgroundColor: theme.palette.primary.main\n  },\n  weatherDetails: {\n    color: theme.palette.primary.contrastText\n  },\n  weatherIcon: {\n    fontSize: 26\n  }\n}));\n\nconst getWindDirection = (degree, classes) => {\n  const direction = windDirection(degree);\n  switch (direction) {\n    case 'n':\n      return <ArrowUpwardIcon />;\n    case 'ne':\n      return <CallMadeIcon />;\n    case 'e':\n      return <ArrowForwardIcon />;\n    case 'se':\n      return <CallReceivedIcon className={classes.flip} />;\n    case 's':\n      return <ArrowDownwardIcon />;\n    case 'sw':\n      return <CallReceivedIcon />;\n    case 'w':\n      return <ArrowBackIcon />;\n    case 'nw':\n      return <CallMadeIcon className={classes.flip} />;\n    default:\n      break;\n  }\n};\n\nconst WeatherCard = ({ city, country, days }) => {\n  const classes = useStyles();\n  const [current, setCurrent] = useState(undefined);\n  const [forecast, setForecast] = useState(undefined);\n\n  useEffect(() => {\n    (async function() {\n      try {\n        const forecast = await getWeather(city, country, days);\n\n        if (forecast) {\n          const current = forecast.list[0];\n          setCurrent(current);\n          setForecast(forecast);\n        }\n      } catch (e) {\n        console.error(e);\n      }\n    })();\n  }, [city, country, days]);\n\n  return (\n    <Card>\n      {current && (\n        <>\n          <CardContent>\n            <Grid\n              container\n              spacing={0}\n              direction={'row'}\n              justify={'space-between'}\n            >\n              <Grid item>\n                {forecast && (\n                  <Typography variant=\"h6\">{`${forecast.city.name}, ${forecast.city.country}`}</Typography>\n                )}\n                <Typography variant=\"subtitle1\">\n                  {format(current.dt * 1000, 'MMMM Do yyyy, h:mm:ss a')}\n                </Typography>\n                <Typography variant=\"caption\">\n                  {capitalize(current.weather[0].description)}\n                </Typography>\n              </Grid>\n              <Grid item className=\"text-xs-right\">\n                <Typography variant=\"h4\">\n                  <span>{current.main.temp}</span>\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid\n              container\n              spacing={1}\n              alignItems={'center'}\n              direction={'row'}\n              justify={'space-between'}\n              className=\"my-1\"\n            >\n              {Object.keys(current.main).map((key, index) => (\n                <Grid item xs={6} key={index}>\n                  <Grid\n                    container\n                    spacing={0}\n                    alignItems={'center'}\n                    direction={'row'}\n                    justify={'space-between'}\n                  >\n                    <Grid item>\n                      <Typography variant=\"caption\">\n                        <span>{capitalize(key.replace(/_/g, ' '))}</span>\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"caption\">\n                        <span>{current.main[key]}</span>\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              ))}\n            </Grid>\n          </CardContent>\n          <CardContent className={classes.weatherBackground}>\n            {forecast && (\n              <Grid\n                container\n                spacing={0}\n                alignItems={'center'}\n                direction={'row'}\n                justify={'space-between'}\n                className=\"text-xs-center\"\n              >\n                {forecast.list.map(\n                  (day, index) =>\n                    index !== 0 && (\n                      <Typography\n                        variant=\"caption\"\n                        className={classes.weatherDetails}\n                        key={index}\n                      >\n                        <span className=\"block\">{day.weather.description}</span>\n                        <span className=\"block py-xs\">\n                          {getWindDirection(day.wind.deg, classes)}\n                        </span>\n                        <span className=\"block pb-xs\">\n                          {format(current.dt * 1000, 'ddd')}\n                        </span>\n                        <span className=\"block pb-xs\">\n                          <i\n                            className={classNames(\n                              getWeatherIcon(day.weather[0].icon),\n                              classes.weatherIcon\n                            )}\n                          />\n                        </span>\n                        <strong className=\"block pb-xs\">\n                          {`${day.main.temp}`} &deg;\n                        </strong>\n                      </Typography>\n                    )\n                )}\n              </Grid>\n            )}\n          </CardContent>\n        </>\n      )}\n      {!current && !forecast && (\n        <CardContent>\n          <Typography>Weather Data Not Loaded</Typography>\n        </CardContent>\n      )}\n    </Card>\n  );\n};\n\nWeatherCard.propTypes = {\n  city: PropTypes.string,\n  country: PropTypes.string,\n  days: PropTypes.number\n};\n\nexport default WeatherCard;\n"]},"metadata":{},"sourceType":"module"}