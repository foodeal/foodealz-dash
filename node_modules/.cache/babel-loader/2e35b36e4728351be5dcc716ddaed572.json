{"ast":null,"code":"// import { ProductCard, Wrapper } from '../../components';\n// import React, { useEffect, useState } from 'react';\n// import AppBar from '@material-ui/core/AppBar';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import Divider from '@material-ui/core/Divider';\n// import Drawer from '@material-ui/core/Drawer';\n// import Grid from '@material-ui/core/Grid';\n// import Hidden from '@material-ui/core/Hidden';\n// import IconButton from '@material-ui/core/IconButton';\n// import List from '@material-ui/core/List';\n// import ListItem from '@material-ui/core/ListItem';\n// import ListItemText from '@material-ui/core/ListItemText';\n// import ListSubheader from '@material-ui/core/ListSubheader';\n// import MenuIcon from '@material-ui/icons/Menu';\n// import Toolbar from '@material-ui/core/Toolbar';\n// import Typography from '@material-ui/core/Typography';\n// import { drawerWidth } from '../../styleVariables';\n// import { makeStyles } from '@material-ui/core/styles';\n// import { mockProduct } from '../../utils/mock';\n// const useStyles = makeStyles(theme => ({\n//   root: {\n//     flexGrow: 1,\n//     zIndex: 1,\n//     overflow: 'hidden',\n//     position: 'relative',\n//     display: 'flex'\n//   },\n//   appBar: {\n//     zIndex: theme.zIndex.drawer + 100\n//   },\n//   toolBar: {\n//     paddingLeft: theme.spacing(1) / 2,\n//     paddingRight: theme.spacing(1) / 2\n//   },\n//   drawerPaper: {\n//     position: 'relative',\n//     width: drawerWidth,\n//     maxWidth: drawerWidth,\n//     [theme.breakpoints.up('md')]: {\n//       backgroundColor: 'transparent',\n//       overflow: 'visible'\n//     },\n//     [theme.breakpoints.down('sm')]: {\n//       height: 'calc(100vh - 56px)'\n//     },\n//     [theme.breakpoints.up('sm')]: {\n//       top: '0',\n//       height: 'calc(100vh - 64px)'\n//     },\n//     border: 0,\n//     height: 'auto'\n//   },\n//   content: {\n//     flexGrow: 1,\n//     backgroundColor: theme.palette.background.default,\n//     padding: theme.spacing(1),\n//     minWidth: 0\n//   },\n//   modal: {\n//     [theme.breakpoints.down('sm')]: {\n//       top: '56px'\n//     },\n//     [theme.breakpoints.up('sm')]: {\n//       top: '64px'\n//     },\n//     zIndex: '1000'\n//   },\n//   backdrop: {\n//     [theme.breakpoints.down('sm')]: {\n//       top: '56px'\n//     },\n//     [theme.breakpoints.up('sm')]: {\n//       top: '64px'\n//     }\n//   },\n//   checkbox: {\n//     width: '24px',\n//     height: '24px'\n//   }\n// }));\n// const Products = () => {\n//   const classes = useStyles();\n//   const [opened, setOpened] = useState(false);\n//   const [products, setProducts] = useState([]);\n//   useEffect(() => {\n//     let mockProducts = [];\n//     const addProducts = i => {\n//       mockProducts.push({\n//         id: i,\n//         ...mockProduct()\n//       });\n//     };\n//     for (let num = 1; num <= 21; num += 1) {\n//       addProducts(num);\n//     }\n//     setProducts(mockProducts);\n//   }, []);\n//   const handleDrawerToggle = () => setOpened(!opened);\n//   const menu = (\n//     <>\n//       <List subheader={<ListSubheader disableSticky>Brands</ListSubheader>}>\n//         {['Apple', 'Microsoft', 'Samsung', 'HTC', 'Sony', 'Huawei'].map(\n//           value => (\n//             <ListItem key={value} role={undefined} button>\n//               <Checkbox\n//                 tabIndex={-1}\n//                 disableRipple\n//                 className={classes.checkbox}\n//               />\n//               <ListItemText primary={value} />\n//             </ListItem>\n//           )\n//         )}\n//       </List>\n//       <Divider />\n//       <List\n//         subheader={<ListSubheader disableSticky>Screen Size</ListSubheader>}\n//       >\n//         {['16 GB', '32 GB', '64 GB', '128 GB'].map(value => (\n//           <ListItem\n//             key={value}\n//             role={undefined}\n//             button\n//             className={classes.listItem}\n//           >\n//             <Checkbox\n//               tabIndex={-1}\n//               disableRipple\n//               className={classes.checkbox}\n//             />\n//             <ListItemText primary={value} />\n//           </ListItem>\n//         ))}\n//       </List>\n//       <Divider />\n//       <List\n//         subheader={\n//           <ListSubheader disableSticky>Operating System</ListSubheader>\n//         }\n//       >\n//         {['Android', 'iOS', 'Windows'].map(value => (\n//           <ListItem\n//             key={value}\n//             role={undefined}\n//             button\n//             className={classes.listItem}\n//           >\n//             <Checkbox\n//               tabIndex={-1}\n//               disableRipple\n//               className={classes.checkbox}\n//             />\n//             <ListItemText primary={value} />\n//           </ListItem>\n//         ))}\n//       </List>\n//     </>\n//   );\n//   return (\n//     <Wrapper padding={false}>\n//       <Hidden mdUp>\n//         <AppBar position=\"static\" className={classes.appBar}>\n//           <Toolbar className={classes.toolBar}>\n//             <IconButton\n//               color=\"inherit\"\n//               aria-label=\"open drawer\"\n//               onClick={() => handleDrawerToggle()}\n//             >\n//               <MenuIcon />\n//             </IconButton>\n//             <Typography variant=\"h6\" color=\"inherit\" noWrap>\n//               Products\n//             </Typography>\n//           </Toolbar>\n//         </AppBar>\n//       </Hidden>\n//       <Grid className={classes.root}>\n//         <Hidden smDown>\n//           <Drawer\n//             variant=\"permanent\"\n//             ModalProps={{\n//               keepMounted: false,\n//               className: classes.modal,\n//               BackdropProps: {\n//                 className: classes.backdrop\n//               },\n//               onBackdropClick: handleDrawerToggle\n//             }}\n//             classes={{\n//               paper: classes.drawerPaper\n//             }}\n//           >\n//             {menu}\n//           </Drawer>\n//         </Hidden>\n//         <Hidden mdUp>\n//           <Drawer\n//             variant=\"temporary\"\n//             open={opened}\n//             ModalProps={{\n//               keepMounted: false,\n//               className: classes.modal,\n//               BackdropProps: {\n//                 className: classes.backdrop\n//               },\n//               onBackdropClick: handleDrawerToggle\n//             }}\n//             classes={{\n//               paper: classes.drawerPaper\n//             }}\n//           >\n//             {menu}\n//           </Drawer>\n//         </Hidden>\n//         <main className={classes.content}>\n//           <Grid container spacing={1}>\n//             {products.map((product, index) => (\n//               <Grid item xs={12} sm={6} md={6} lg={4} key={index}>\n//                 <ProductCard\n//                   id={product.id}\n//                   name={product.name}\n//                   price={product.price}\n//                   description={product.description}\n//                   sale={product.sale}\n//                   discounted={product.discounted}\n//                   discount={product.discount}\n//                 />\n//               </Grid>\n//             ))}\n//           </Grid>\n//         </main>\n//       </Grid>\n//     </Wrapper>\n//   );\n// };\n// export default Products;","map":{"version":3,"sources":["C:/Users/HorchiAbla/Desktop/dashboard1/src/pages/Ecommerce/Products.js"],"names":[],"mappingssourcesContent":["// import { ProductCard, Wrapper } from '../../components';\n// import React, { useEffect, useState } from 'react';\n\n// import AppBar from '@material-ui/core/AppBar';\n// import Checkbox from '@material-ui/core/Checkbox';\n// import Divider from '@material-ui/core/Divider';\n// import Drawer from '@material-ui/core/Drawer';\n// import Grid from '@material-ui/core/Grid';\n// import Hidden from '@material-ui/core/Hidden';\n// import IconButton from '@material-ui/core/IconButton';\n// import List from '@material-ui/core/List';\n// import ListItem from '@material-ui/core/ListItem';\n// import ListItemText from '@material-ui/core/ListItemText';\n// import ListSubheader from '@material-ui/core/ListSubheader';\n// import MenuIcon from '@material-ui/icons/Menu';\n// import Toolbar from '@material-ui/core/Toolbar';\n// import Typography from '@material-ui/core/Typography';\n// import { drawerWidth } from '../../styleVariables';\n// import { makeStyles } from '@material-ui/core/styles';\n// import { mockProduct } from '../../utils/mock';\n\n// const useStyles = makeStyles(theme => ({\n//   root: {\n//     flexGrow: 1,\n//     zIndex: 1,\n//     overflow: 'hidden',\n//     position: 'relative',\n//     display: 'flex'\n//   },\n//   appBar: {\n//     zIndex: theme.zIndex.drawer + 100\n//   },\n//   toolBar: {\n//     paddingLeft: theme.spacing(1) / 2,\n//     paddingRight: theme.spacing(1) / 2\n//   },\n//   drawerPaper: {\n//     position: 'relative',\n//     width: drawerWidth,\n//     maxWidth: drawerWidth,\n//     [theme.breakpoints.up('md')]: {\n//       backgroundColor: 'transparent',\n//       overflow: 'visible'\n//     },\n//     [theme.breakpoints.down('sm')]: {\n//       height: 'calc(100vh - 56px)'\n//     },\n//     [theme.breakpoints.up('sm')]: {\n//       top: '0',\n//       height: 'calc(100vh - 64px)'\n//     },\n//     border: 0,\n//     height: 'auto'\n//   },\n//   content: {\n//     flexGrow: 1,\n//     backgroundColor: theme.palette.background.default,\n//     padding: theme.spacing(1),\n//     minWidth: 0\n//   },\n//   modal: {\n//     [theme.breakpoints.down('sm')]: {\n//       top: '56px'\n//     },\n//     [theme.breakpoints.up('sm')]: {\n//       top: '64px'\n//     },\n//     zIndex: '1000'\n//   },\n//   backdrop: {\n//     [theme.breakpoints.down('sm')]: {\n//       top: '56px'\n//     },\n//     [theme.breakpoints.up('sm')]: {\n//       top: '64px'\n//     }\n//   },\n//   checkbox: {\n//     width: '24px',\n//     height: '24px'\n//   }\n// }));\n\n// const Products = () => {\n//   const classes = useStyles();\n//   const [opened, setOpened] = useState(false);\n//   const [products, setProducts] = useState([]);\n\n//   useEffect(() => {\n//     let mockProducts = [];\n\n//     const addProducts = i => {\n//       mockProducts.push({\n//         id: i,\n//         ...mockProduct()\n//       });\n//     };\n\n//     for (let num = 1; num <= 21; num += 1) {\n//       addProducts(num);\n//     }\n\n//     setProducts(mockProducts);\n//   }, []);\n\n//   const handleDrawerToggle = () => setOpened(!opened);\n\n//   const menu = (\n//     <>\n//       <List subheader={<ListSubheader disableSticky>Brands</ListSubheader>}>\n//         {['Apple', 'Microsoft', 'Samsung', 'HTC', 'Sony', 'Huawei'].map(\n//           value => (\n//             <ListItem key={value} role={undefined} button>\n//               <Checkbox\n//                 tabIndex={-1}\n//                 disableRipple\n//                 className={classes.checkbox}\n//               />\n//               <ListItemText primary={value} />\n//             </ListItem>\n//           )\n//         )}\n//       </List>\n//       <Divider />\n//       <List\n//         subheader={<ListSubheader disableSticky>Screen Size</ListSubheader>}\n//       >\n//         {['16 GB', '32 GB', '64 GB', '128 GB'].map(value => (\n//           <ListItem\n//             key={value}\n//             role={undefined}\n//             button\n//             className={classes.listItem}\n//           >\n//             <Checkbox\n//               tabIndex={-1}\n//               disableRipple\n//               className={classes.checkbox}\n//             />\n//             <ListItemText primary={value} />\n//           </ListItem>\n//         ))}\n//       </List>\n//       <Divider />\n//       <List\n//         subheader={\n//           <ListSubheader disableSticky>Operating System</ListSubheader>\n//         }\n//       >\n//         {['Android', 'iOS', 'Windows'].map(value => (\n//           <ListItem\n//             key={value}\n//             role={undefined}\n//             button\n//             className={classes.listItem}\n//           >\n//             <Checkbox\n//               tabIndex={-1}\n//               disableRipple\n//               className={classes.checkbox}\n//             />\n//             <ListItemText primary={value} />\n//           </ListItem>\n//         ))}\n//       </List>\n//     </>\n//   );\n\n//   return (\n//     <Wrapper padding={false}>\n//       <Hidden mdUp>\n//         <AppBar position=\"static\" className={classes.appBar}>\n//           <Toolbar className={classes.toolBar}>\n//             <IconButton\n//               color=\"inherit\"\n//               aria-label=\"open drawer\"\n//               onClick={() => handleDrawerToggle()}\n//             >\n//               <MenuIcon />\n//             </IconButton>\n//             <Typography variant=\"h6\" color=\"inherit\" noWrap>\n//               Products\n//             </Typography>\n//           </Toolbar>\n//         </AppBar>\n//       </Hidden>\n//       <Grid className={classes.root}>\n//         <Hidden smDown>\n//           <Drawer\n//             variant=\"permanent\"\n//             ModalProps={{\n//               keepMounted: false,\n//               className: classes.modal,\n//               BackdropProps: {\n//                 className: classes.backdrop\n//               },\n//               onBackdropClick: handleDrawerToggle\n//             }}\n//             classes={{\n//               paper: classes.drawerPaper\n//             }}\n//           >\n//             {menu}\n//           </Drawer>\n//         </Hidden>\n//         <Hidden mdUp>\n//           <Drawer\n//             variant=\"temporary\"\n//             open={opened}\n//             ModalProps={{\n//               keepMounted: false,\n//               className: classes.modal,\n//               BackdropProps: {\n//                 className: classes.backdrop\n//               },\n//               onBackdropClick: handleDrawerToggle\n//             }}\n//             classes={{\n//               paper: classes.drawerPaper\n//             }}\n//           >\n//             {menu}\n//           </Drawer>\n//         </Hidden>\n//         <main className={classes.content}>\n//           <Grid container spacing={1}>\n//             {products.map((product, index) => (\n//               <Grid item xs={12} sm={6} md={6} lg={4} key={index}>\n//                 <ProductCard\n//                   id={product.id}\n//                   name={product.name}\n//                   price={product.price}\n//                   description={product.description}\n//                   sale={product.sale}\n//                   discounted={product.discounted}\n//                   discount={product.discount}\n//                 />\n//               </Grid>\n//             ))}\n//           </Grid>\n//         </main>\n//       </Grid>\n//     </Wrapper>\n//   );\n// };\n\n// export default Products;\n"]},"metadata":{},"sourceType":"module"}