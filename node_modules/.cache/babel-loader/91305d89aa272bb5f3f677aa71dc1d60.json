{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HorchiAbla\\\\Desktop\\\\dashboard1\\\\src\\\\pages\\\\TestValide\\\\TestValide.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { TextField } from '@material-ui/core';\nimport { Button } from '@material-ui/core'; // import { useForm } from 'react-hook-form';\n// import { yupResolver } from '@hookform/resolvers/yup';\n// import * as yup from 'yup';\n\nimport { withStyles, makeStyles } from '@material-ui/core/styles'; // let schema = yup.object().shape({\n//     username: yup.string().required('please enter username'),\n//     email: yup.string().email().required('email invallid'),\n//     password: yup.string().min(4).max(8).required('password nvalid'),\n// });\n\nconst TestValide = () => {\n  _s();\n\n  // const { register, handleSubmit, error } = useForm({\n  //     resolver: yupResolver(schema),\n  // });\n  const [data, setData] = React.useState({\n    error: '',\n    data: [],\n    temp: [],\n    error: null,\n    fields: [],\n    errors: [],\n    username: '',\n    email: '',\n    phone: '',\n    password: ''\n  });\n\n  const handleValidation = () => {\n    const fields = data.fields;\n    const errors = {};\n    let formIsValid = true; //Name\n\n    if (!fields[\"username\"]) {\n      formIsValid = false;\n      errors[\"username\"] = \"Cannot be empty\";\n    }\n\n    if (typeof fields[\"username\"] !== \"undefined\") {\n      if (!fields[\"username\"].match(/^[a-zA-Z]+$/)) {\n        formIsValid = false;\n        errors[\"username\"] = \"Only letters\";\n      }\n    } //Email\n\n\n    if (!fields[\"email\"]) {\n      formIsValid = false;\n      errors[\"email\"] = \"Cannot be empty\";\n    }\n\n    if (typeof fields[\"email\"] !== \"undefined\") {\n      const lastAtPos = fields[\"email\"].lastIndexOf('@');\n      const lastDotPos = fields[\"email\"].lastIndexOf('.');\n\n      if (!(lastAtPos < lastDotPos && lastAtPos > 0 && fields[\"email\"].indexOf('@@') == -1 && lastDotPos > 2 && fields[\"email\"].length - lastDotPos > 2)) {\n        formIsValid = false;\n        errors[\"email\"] = \"Email is not valid\";\n      }\n    } //Phone\n\n\n    if (!fields[\"phone\"]) {\n      formIsValid = false;\n      errors[\"phone\"] = \"Cannot be empty\";\n    }\n\n    if (typeof fields[\"phone\"] !== \"undefined\") {\n      if (!fields[\"phone\"].match(/^[0-9]+$/)) {\n        formIsValid = false;\n        errors[\"phone\"] = \"Only numbers\";\n      }\n    }\n\n    setData({ ...data,\n      errors: errors\n    });\n    return formIsValid;\n  };\n\n  const contactSubmit = e => {\n    e.preventDefault();\n\n    if (handleValidation()) {\n      alert(\"Form submitted\");\n    } else {\n      alert(\"Form has errors.\");\n    }\n  };\n\n  const handleChange = (field, e) => {\n    let fields = data.fields;\n    fields[field] = e.target.value;\n    setData({ ...data,\n      fields: fields\n    });\n  }; //   const usernamechange = (e) => {\n  //     setData({\n  //       ...data,\n  //       username: e\n  //     })\n  //   }\n  //   const emailchange = (e) => {\n  //     setData({\n  //       ...data,\n  //       email: e\n  //     })\n  //   }\n  //   const passwordchange = (e) => {\n  //     setData({\n  //       ...data,\n  //       password: e\n  //     })\n  //   }\n  // const submitForm = () => {\n  //     console.log(data.username);\n  //     console.log(data.email);\n  //     console.log(data.password);\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sign In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      name: \"contactform\",\n      className: \"contactform\",\n      onSubmit: e => contactSubmit(e),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6\",\n        children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ref: \"username\",\n            type: \"text\",\n            size: \"30\",\n            placeholder: \"username\",\n            onChange: e => handleChange(e, \"name\"),\n            value: data.fields[\"username\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: \"red\"\n            },\n            children: data.errors[\"username\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            ref: \"email\",\n            type: \"text\",\n            size: \"30\",\n            placeholder: \"Email\",\n            onChange: e => handleChange(e, \"email\"),\n            value: data.fields[\"email\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: \"red\"\n            },\n            children: data.errors[\"email\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            ref: \"phone\",\n            type: \"text\",\n            size: \"30\",\n            placeholder: \"Phone\",\n            onChange: e => handleChange(e, \"phone\"),\n            value: data.fields[\"phone\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: \"red\"\n            },\n            children: data.errors[\"phone\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      children: \" submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TestValide, \"E7rS5hZjfTYv3vOvXa/70rgAVpA=\");\n\n_c = TestValide;\nexport default TestValide;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestValide\");","map":{"version":3,"sources":["C:/Users/HorchiAbla/Desktop/dashboard1/src/pages/TestValide/TestValide.js"],"names":["React","useState","useEffect","TextField","Button","withStyles","makeStyles","TestValide","data","setData","error","temp","fields","errors","username","email","phone","password","handleValidation","formIsValid","match","lastAtPos","lastIndexOf","lastDotPos","indexOf","length","contactSubmit","e","preventDefault","alert","handleChange","field","target","value","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\n// import { useForm } from 'react-hook-form';\r\n// import { yupResolver } from '@hookform/resolvers/yup';\r\n// import * as yup from 'yup';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n\r\n\r\n// let schema = yup.object().shape({\r\n//     username: yup.string().required('please enter username'),\r\n//     email: yup.string().email().required('email invallid'),\r\n//     password: yup.string().min(4).max(8).required('password nvalid'),\r\n\r\n// });\r\n\r\n\r\n\r\nconst TestValide = () => {\r\n\r\n  // const { register, handleSubmit, error } = useForm({\r\n  //     resolver: yupResolver(schema),\r\n  // });\r\n\r\n  const [data, setData] = React.useState({\r\n\r\n    error: '',\r\n    data: [],\r\n    temp: [],\r\n    error: null,\r\n    fields: [],\r\n    errors: [],\r\n    username: '',\r\n    email: '',\r\n    phone: '',\r\n    password: ''\r\n\r\n  });\r\n\r\n  const handleValidation = () => {\r\n    const fields = data.fields;\r\n    const errors = {};\r\n    let formIsValid = true;\r\n\r\n    //Name\r\n    if (!fields[\"username\"]) {\r\n      formIsValid = false;\r\n      errors[\"username\"] = \"Cannot be empty\";\r\n    }\r\n    if (typeof fields[\"username\"] !== \"undefined\") {\r\n      if (!fields[\"username\"].match(/^[a-zA-Z]+$/)) {\r\n        formIsValid = false;\r\n        errors[\"username\"] = \"Only letters\";\r\n      }\r\n    }\r\n\r\n    //Email\r\n    if (!fields[\"email\"]) {\r\n      formIsValid = false;\r\n      errors[\"email\"] = \"Cannot be empty\";\r\n    }\r\n\r\n    if (typeof fields[\"email\"] !== \"undefined\") {\r\n      const lastAtPos = fields[\"email\"].lastIndexOf('@');\r\n      const lastDotPos = fields[\"email\"].lastIndexOf('.');\r\n\r\n      if (!(lastAtPos < lastDotPos && lastAtPos > 0 && fields[\"email\"].indexOf('@@') == -1 && lastDotPos > 2 && (fields[\"email\"].length - lastDotPos) > 2)) {\r\n        formIsValid = false;\r\n        errors[\"email\"] = \"Email is not valid\";\r\n      }\r\n    }\r\n    //Phone\r\n    if (!fields[\"phone\"]) {\r\n      formIsValid = false;\r\n      errors[\"phone\"] = \"Cannot be empty\";\r\n    }\r\n    if (typeof fields[\"phone\"] !== \"undefined\") {\r\n      if (!fields[\"phone\"].match(/^[0-9]+$/)) {\r\n        formIsValid = false;\r\n        errors[\"phone\"] = \"Only numbers\";\r\n      }\r\n    }\r\n\r\n    setData({\r\n      ...data,\r\n      errors: errors,\r\n    });\r\n\r\n    return formIsValid;\r\n\r\n\r\n  };\r\n\r\n  const contactSubmit = (e) => {\r\n    e.preventDefault()\r\n    if (handleValidation()) {\r\n      alert(\"Form submitted\");\r\n    } else {\r\n      alert(\"Form has errors.\")\r\n    }\r\n\r\n  }\r\n\r\n  const handleChange = (field, e) => {\r\n    let fields = data.fields;\r\n    fields[field] = e.target.value;\r\n    setData({\r\n      ...data,\r\n      fields: fields,\r\n    });\r\n\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n  //   const usernamechange = (e) => {\r\n  //     setData({\r\n  //       ...data,\r\n  //       username: e\r\n  //     })\r\n  //   }\r\n\r\n  //   const emailchange = (e) => {\r\n  //     setData({\r\n  //       ...data,\r\n  //       email: e\r\n  //     })\r\n  //   }\r\n\r\n  //   const passwordchange = (e) => {\r\n  //     setData({\r\n  //       ...data,\r\n  //       password: e\r\n  //     })\r\n  //   }\r\n\r\n  // const submitForm = () => {\r\n  //     console.log(data.username);\r\n  //     console.log(data.email);\r\n  //     console.log(data.password);\r\n  // };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h2>Sign In</h2>\r\n      <form name=\"contactform\" className=\"contactform\" onSubmit={(e)=>contactSubmit(e)}>\r\n        <div className=\"col-md-6\">\r\n          <fieldset>\r\n            <input ref={\"username\"} type=\"text\" size=\"30\" placeholder=\"username\" onChange={(e) => handleChange(e, \"name\")} value={data.fields[\"username\"]} />\r\n            <span style={{ color: \"red\" }}>{data.errors[\"username\"]}</span>\r\n            <br />\r\n            <input ref={\"email\"} type=\"text\" size=\"30\" placeholder=\"Email\" onChange={(e) => handleChange(e, \"email\")} value={data.fields[\"email\"]} />\r\n            <span style={{ color: \"red\" }}>{data.errors[\"email\"]}</span>\r\n            <br />\r\n            <input ref={\"phone\"} type=\"text\" size=\"30\" placeholder=\"Phone\" onChange={(e) => handleChange(e, \"phone\")} value={data.fields[\"phone\"]} />\r\n            <span style={{ color: \"red\" }}>{data.errors[\"phone\"]}</span>\r\n            <br />\r\n            {/* <input refs=\"address\" type=\"text\" size=\"30\" placeholder=\"Address\" onChange={this.handleChange.bind(this, \"address\")} value={this.state.fields[\"address\"]}/>\r\n                             <br/> */}\r\n          </fieldset>\r\n        </div>\r\n\r\n      </form>\r\n      <Button > submit</Button>\r\n\r\n      {/* <form>\r\n                <div >\r\n                    <p style={{ fontSize: '15px', color: \"#008037\", fontWeight: \"bold\", marginTop: '50px' }}>username:</p>\r\n                    <input type=\"text\" name=\"username\" onChange={e => usernamechange(e.target.value)} placeholder=\"enter username\"  />\r\n                    {/* <p>{error.username?.message}</p> */}\r\n      {/* <TextField style={{ marginLeft: '20px', width: '300px', marginTop: '25px', padding: '15px' }}\r\n                        name=\"username\" variant=\"filled\"  /> */}\r\n      {/*                     \r\n                </div>\r\n                <div >\r\n                    <p style={{ fontSize: '15px', color: \"#008037\", fontWeight: \"bold\", marginTop: '50px' }}>email :</p>\r\n                    <input type=\"text\" name=\"email\" placeholder=\"enter email\" onChange={e => emailchange(e.target.value)}   /> */}\r\n      {/* <p>{error.email?.message}</p> */}\r\n      {/* <TextField style={{ width: '300px', marginTop: '25px', padding: '15px' }}\r\n                        name=\"email\" variant=\"filled\"  /> */}\r\n\r\n      {/* </div>\r\n                <div >\r\n                    <p style={{ fontSize: '15px', color: \"#008037\", fontWeight: \"bold\", marginTop: '50px' }}>password :</p>\r\n                    <input type=\"text\" name=\"password\" placeholder=\"enter password\" onChange={e => passwordchange(e.target.value)}  /> */}\r\n      {/* <p>{error.password?.message}</p> */}\r\n      {/* <TextField style={{ width: '300px', marginTop: '25px', padding: '15px' }}\r\n                        name=\"password\" variant=\"filled\"  /> */}\r\n\r\n      {/* </div>\r\n\r\n                <div >\r\n                    \r\n                    <input type=\"submit\" id=\"submit\"   /> */}\r\n      {/* <TextField style={{ width: '300px', marginTop: '25px', padding: '15px' }}\r\n                        name=\"password\" variant=\"filled\"  /> */}\r\n\r\n      {/* </div>\r\n\r\n            </form>\r\n            <Button> submit</Button> */}\r\n    </div>\r\n\r\n  );\r\n}\r\nexport default TestValide;"]},"metadata":{},"sourceType":"module"}