{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\HorchiAbla\\\\Desktop\\\\dashboard1\\\\src\\\\pages\\\\TestValide\\\\TestValide.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { TextField } from '@material-ui/core';\nimport { Button } from '@material-ui/core'; // import { useForm } from 'react-hook-form';\n// import { yupResolver } from '@hookform/resolvers/yup';\n// import * as yup from 'yup';\n\nimport { withStyles, makeStyles } from '@material-ui/core/styles'; // let schema = yup.object().shape({\n//     username: yup.string().required('please enter username'),\n//     email: yup.string().email().required('email invallid'),\n//     password: yup.string().min(4).max(8).required('password nvalid'),\n// });\n\nconst TestValide = () => {\n  _s();\n\n  // const { register, handleSubmit, error } = useForm({\n  //     resolver: yupResolver(schema),\n  // });\n  const [data, setData] = React.useState({\n    error: '',\n    data: [],\n    temp: [],\n    error: null,\n    fields: [],\n    errors: [],\n    username: '',\n    email: '',\n    phone: '',\n    password: ''\n  });\n  let fieldss = React.useRef([]);\n  var errorss = React.useRef([]);\n  const [formIsValid, setFormIsValid] = React.useState(false);\n\n  const handleValidation = () => {\n    const fields = fieldss;\n    const errors = {};\n    let formIsValid = true; //Name\n\n    if (!fields[\"username\"]) {\n      formIsValid = false;\n      errors[\"username\"] = \"Cannot be empty\";\n    }\n\n    if (typeof fields[\"username\"] !== \"undefined\") {\n      if (!fields[\"username\"].match(/^[a-zA-Z]+$/)) {\n        formIsValid = false;\n        errors[\"username\"] = \"Only letters\";\n      }\n    } //Email\n\n\n    if (!fields[\"email\"]) {\n      formIsValid = false;\n      errors[\"email\"] = \"Cannot be empty\";\n    }\n\n    if (typeof fields[\"email\"] !== \"undefined\") {\n      const lastAtPos = fields[\"email\"].lastIndexOf('@');\n      const lastDotPos = fields[\"email\"].lastIndexOf('.');\n\n      if (!(lastAtPos < lastDotPos && lastAtPos > 0 && fields[\"email\"].indexOf('@@') == -1 && lastDotPos > 2 && fields[\"email\"].length - lastDotPos > 2)) {\n        formIsValid = false;\n        errors[\"email\"] = \"Email is not valid\";\n      }\n    } //Phone\n\n\n    if (!fields[\"phone\"]) {\n      formIsValid = false;\n      errors[\"phone\"] = \"Cannot be empty\";\n    }\n\n    if (typeof fields[\"phone\"] !== \"undefined\") {\n      if (!fields[\"phone\"].match(/^[0-9]+$/)) {\n        formIsValid = false;\n        errors[\"phone\"] = \"Only numbers\";\n      }\n    }\n\n    errorss = errors;\n    return formIsValid;\n  };\n\n  const contactSubmit = e => {\n    e.preventDefault();\n\n    if (handleValidation()) {\n      alert(\"Form submitted\");\n    } else {\n      alert(\"Form has errors.\");\n    }\n  };\n\n  const handleChange = (field, e) => {\n    let fields = fieldss;\n    fields[field] = e.target.value;\n    fieldss = fields;\n  }; //   const usernamechange = (e) => {\n  //     setData({\n  //       ...data,\n  //       username: e\n  //     })\n  //   }\n  //   const emailchange = (e) => {\n  //     setData({\n  //       ...data,\n  //       email: e\n  //     })\n  //   }\n  //   const passwordchange = (e) => {\n  //     setData({\n  //       ...data,\n  //       password: e\n  //     })\n  //   }\n  // const submitForm = () => {\n  //     console.log(data.username);\n  //     console.log(data.email);\n  //     console.log(data.password);\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Sign In\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      name: \"contactform\",\n      className: \"contactform\",\n      onSubmit: contactSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6\",\n        children: /*#__PURE__*/_jsxDEV(\"fieldset\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            ref: \"username\",\n            type: \"text\",\n            size: \"30\",\n            placeholder: \"username\",\n            onChange: e => handleChange(e, \"name\"),\n            value: fieldss[\"username\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: \"red\"\n            },\n            children: errorss[\"username\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 31\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            refs: \"email\",\n            type: \"text\",\n            size: \"30\",\n            placeholder: \"Email\",\n            onChange: e => handleChange(e, \"email\"),\n            value: fieldss[\"email\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: \"red\"\n            },\n            children: errorss[\"email\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            refs: \"phone\",\n            type: \"text\",\n            size: \"30\",\n            placeholder: \"Phone\",\n            onChange: e => handleChange(e, \"phone\"),\n            value: fieldss[\"phone\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 30\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              color: \"red\"\n            },\n            children: errorss[\"phone\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 31\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 30\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      children: \" submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TestValide, \"bA3PHXQDiXND1LdOiJiCWeT2n8Q=\");\n\n_c = TestValide;\nexport default TestValide;\n\nvar _c;\n\n$RefreshReg$(_c, \"TestValide\");","map":{"version":3,"sources":["C:/Users/HorchiAbla/Desktop/dashboard1/src/pages/TestValide/TestValide.js"],"names":["React","useState","useEffect","TextField","Button","withStyles","makeStyles","TestValide","data","setData","error","temp","fields","errors","username","email","phone","password","fieldss","useRef","errorss","formIsValid","setFormIsValid","handleValidation","match","lastAtPos","lastIndexOf","lastDotPos","indexOf","length","contactSubmit","e","preventDefault","alert","handleChange","field","target","value","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { TextField } from '@material-ui/core';\r\nimport { Button } from '@material-ui/core';\r\n// import { useForm } from 'react-hook-form';\r\n// import { yupResolver } from '@hookform/resolvers/yup';\r\n// import * as yup from 'yup';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\n\r\n\r\n// let schema = yup.object().shape({\r\n//     username: yup.string().required('please enter username'),\r\n//     email: yup.string().email().required('email invallid'),\r\n//     password: yup.string().min(4).max(8).required('password nvalid'),\r\n\r\n// });\r\n\r\n\r\n\r\nconst TestValide = () => {\r\n\r\n    // const { register, handleSubmit, error } = useForm({\r\n    //     resolver: yupResolver(schema),\r\n    // });\r\n\r\n    const [data,setData] = React.useState({\r\n    \r\n        error: '',\r\n        data: [],\r\n        temp: [],\r\n        error: null,\r\n        fields: [],\r\n        errors: [],\r\n        username:'',\r\n        email:'',\r\n        phone:'',\r\n        password:''\r\n       \r\n      });\r\n\r\n      let fieldss = React.useRef([])\r\n      var errorss = React.useRef([])\r\n\r\n       const [formIsValid, setFormIsValid] = React.useState(false);\r\n     \r\n     const handleValidation =() =>{\r\n         const fields= fieldss;\r\n         const errors={};\r\n         let formIsValid = true;\r\n\r\n            //Name\r\n            if(!fields[\"username\"]){\r\n               formIsValid = false;\r\n               errors[\"username\"] = \"Cannot be empty\";\r\n            }     \r\n            if(typeof fields[\"username\"] !== \"undefined\"){\r\n               if(!fields[\"username\"].match(/^[a-zA-Z]+$/)){\r\n                 formIsValid = false;\r\n                  errors[\"username\"] = \"Only letters\";\r\n               }        \r\n            }\r\n\r\n              //Email\r\n            if(!fields[\"email\"]){\r\n               formIsValid = false;\r\n               errors[\"email\"] = \"Cannot be empty\";\r\n            }\r\n      \r\n            if(typeof fields[\"email\"] !== \"undefined\"){\r\n               const lastAtPos = fields[\"email\"].lastIndexOf('@');\r\n               const lastDotPos = fields[\"email\"].lastIndexOf('.');\r\n\r\n               if (!(lastAtPos < lastDotPos && lastAtPos > 0 && fields[\"email\"].indexOf('@@') == -1 && lastDotPos > 2 && (fields[\"email\"].length - lastDotPos) > 2)) {\r\n                 formIsValid = false;\r\n                  errors[\"email\"] = \"Email is not valid\";\r\n                }\r\n           }  \r\n           //Phone\r\n            if(!fields[\"phone\"]){\r\n               formIsValid = false;\r\n               errors[\"phone\"] = \"Cannot be empty\";\r\n            }     \r\n            if(typeof fields[\"phone\"] !== \"undefined\"){\r\n               if(!fields[\"phone\"].match(/^[0-9]+$/)){\r\n               formIsValid = false;\r\n                  errors[\"phone\"] = \"Only numbers\";\r\n               }        \r\n            }\r\n           \r\n          errorss= errors\r\n    \r\n\r\n        return formIsValid;\r\n\r\n\r\n     };\r\n\r\n     const contactSubmit = (e) => {\r\n         e.preventDefault()\r\n         if(handleValidation()){\r\n               alert(\"Form submitted\");\r\n            }else{\r\n               alert(\"Form has errors.\")\r\n            }\r\n\r\n     }\r\n\r\n     const handleChange =(field, e) =>{\r\n         let fields = fieldss;\r\n         fields[field]=e.target.value;\r\n         fieldss= fields\r\n     }\r\n     \r\n\r\n\r\n        \r\n    \r\n    //   const usernamechange = (e) => {\r\n    //     setData({\r\n    //       ...data,\r\n    //       username: e\r\n    //     })\r\n    //   }\r\n\r\n    //   const emailchange = (e) => {\r\n    //     setData({\r\n    //       ...data,\r\n    //       email: e\r\n    //     })\r\n    //   }\r\n\r\n    //   const passwordchange = (e) => {\r\n    //     setData({\r\n    //       ...data,\r\n    //       password: e\r\n    //     })\r\n    //   }\r\n\r\n    // const submitForm = () => {\r\n    //     console.log(data.username);\r\n    //     console.log(data.email);\r\n    //     console.log(data.password);\r\n    // };\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <h2>Sign In</h2>\r\n             <form name=\"contactform\" className=\"contactform\" onSubmit={contactSubmit}>\r\n                        <div className=\"col-md-6\">\r\n                          <fieldset>\r\n                               <input ref=\"username\" type=\"text\" size=\"30\" placeholder=\"username\" onChange={(e)=> handleChange(e,\"name\")} value={fieldss[\"username\"]}/>\r\n                               <span style={{color: \"red\"}}>{errorss[\"username\"]}</span>\r\n                              <br/>\r\n                             <input refs=\"email\" type=\"text\" size=\"30\" placeholder=\"Email\" onChange={(e)=>handleChange(e,\"email\")} value={fieldss[\"email\"]}/>\r\n                             <span style={{color: \"red\"}}>{errorss[\"email\"]}</span>\r\n                             <br/>\r\n                             <input refs=\"phone\" type=\"text\" size=\"30\" placeholder=\"Phone\" onChange={(e)=>handleChange(e,\"phone\")} value={fieldss[\"phone\"]}/>\r\n                              <span style={{color: \"red\"}}>{errorss[\"phone\"]}</span>\r\n                             <br/>\r\n                             {/* <input refs=\"address\" type=\"text\" size=\"30\" placeholder=\"Address\" onChange={this.handleChange.bind(this, \"address\")} value={this.state.fields[\"address\"]}/>\r\n                             <br/> */}\r\n                         </fieldset>\r\n                      </div>\r\n          \r\n                  </form>\r\n                   <Button > submit</Button> \r\n                   \r\n            {/* <form>\r\n                <div >\r\n                    <p style={{ fontSize: '15px', color: \"#008037\", fontWeight: \"bold\", marginTop: '50px' }}>username:</p>\r\n                    <input type=\"text\" name=\"username\" onChange={e => usernamechange(e.target.value)} placeholder=\"enter username\"  />\r\n                    {/* <p>{error.username?.message}</p> */}\r\n                    {/* <TextField style={{ marginLeft: '20px', width: '300px', marginTop: '25px', padding: '15px' }}\r\n                        name=\"username\" variant=\"filled\"  /> */}\r\n{/*                     \r\n                </div>\r\n                <div >\r\n                    <p style={{ fontSize: '15px', color: \"#008037\", fontWeight: \"bold\", marginTop: '50px' }}>email :</p>\r\n                    <input type=\"text\" name=\"email\" placeholder=\"enter email\" onChange={e => emailchange(e.target.value)}   /> */}\r\n                    {/* <p>{error.email?.message}</p> */}\r\n                    {/* <TextField style={{ width: '300px', marginTop: '25px', padding: '15px' }}\r\n                        name=\"email\" variant=\"filled\"  /> */}\r\n                    \r\n                {/* </div>\r\n                <div >\r\n                    <p style={{ fontSize: '15px', color: \"#008037\", fontWeight: \"bold\", marginTop: '50px' }}>password :</p>\r\n                    <input type=\"text\" name=\"password\" placeholder=\"enter password\" onChange={e => passwordchange(e.target.value)}  /> */}\r\n                    {/* <p>{error.password?.message}</p> */}\r\n                    {/* <TextField style={{ width: '300px', marginTop: '25px', padding: '15px' }}\r\n                        name=\"password\" variant=\"filled\"  /> */}\r\n                  \r\n                {/* </div>\r\n\r\n                <div >\r\n                    \r\n                    <input type=\"submit\" id=\"submit\"   /> */}\r\n                    {/* <TextField style={{ width: '300px', marginTop: '25px', padding: '15px' }}\r\n                        name=\"password\" variant=\"filled\"  /> */}\r\n                  \r\n                {/* </div>\r\n\r\n            </form>\r\n            <Button> submit</Button> */} \r\n        </div>\r\n\r\n    );\r\n}\r\nexport default TestValide;"]},"metadata":{},"sourceType":"module"}