{"ast":null,"code":"// import React, { useState } from \"react\";\n// import { mockChats, mockContacts } from \"../../utils/mock\";\n// import AppBar from \"@material-ui/core/AppBar\";\n// import Avatar from \"@material-ui/core/Avatar\";\n// import Card from \"@material-ui/core/Card\";\n// import Divider from \"@material-ui/core/Divider\";\n// import Drawer from \"@material-ui/core/Drawer\";\n// import Fab from \"@material-ui/core/Fab\";\n// import Grid from \"@material-ui/core/Grid\";\n// import Hidden from \"@material-ui/core/Hidden\";\n// import IconButton from \"@material-ui/core/IconButton\";\n// import List from \"@material-ui/core/List\";\n// import ListItem from \"@material-ui/core/ListItem\";\n// import ListItemText from \"@material-ui/core/ListItemText\";\n// import ListSubheader from \"@material-ui/core/ListSubheader\";\n// import MenuIcon from \"@material-ui/icons/Menu\";\n// import MoreVertIcon from \"@material-ui/icons/MoreVert\";\n// import SendIcon from \"@material-ui/icons/Send\";\n// import TextField from \"@material-ui/core/TextField\";\n// import Toolbar from \"@material-ui/core/Toolbar\";\n// import Typography from \"@material-ui/core/Typography\";\n// import { Wrapper } from \"../../components\";\n// import classNames from \"classnames\";\n// import { drawerWidth } from \"../../styleVariables\";\n// import formatDistanceToNow from 'date-fns/formatDistanceToNow'\n// import { makeStyles } from \"@material-ui/core/styles\";\n// const useStyles = makeStyles(theme => ({\n//   root: {\n//     zIndex: 1,\n//     overflow: \"hidden\",\n//     position: \"relative\"\n//   },\n//   header: {\n//     marginTop: \"-72px\",\n//     padding: \"8px\"\n//   },\n//   appBar: {\n//     zIndex: theme.zIndex.drawer + 1,\n//     position: \"relative\",\n//     boxShadow: \"0 1px 8px rgba(0,0,0,.3)\"\n//   },\n//   toolBar: {\n//     [theme.breakpoints.down(\"sm\")]: {\n//       paddingLeft: theme.spacing(1) / 2,\n//       paddingRight: theme.spacing(1) / 2\n//     }\n//   },\n//   drawerPaper: {\n//     position: \"relative\",\n//     width: drawerWidth,\n//     maxWidth: drawerWidth,\n//     overflow: \"auto\",\n//     height: \"100%\"\n//   },\n//   modal: {\n//     [theme.breakpoints.down(\"sm\")]: {\n//       top: \"56px\"\n//     },\n//     [theme.breakpoints.up(\"sm\")]: {\n//       top: \"64px\"\n//     },\n//     zIndex: \"1000\"\n//   },\n//   backdrop: {\n//     [theme.breakpoints.down(\"sm\")]: {\n//       top: \"56px\"\n//     },\n//     [theme.breakpoints.up(\"sm\")]: {\n//       top: \"64px\"\n//     }\n//   },\n//   headerLeft: {\n//     position: \"relative\",\n//     [theme.breakpoints.up(\"md\")]: {\n//       width: drawerWidth,\n//       maxWidth: drawerWidth\n//     },\n//     [theme.breakpoints.up(\"sm\")]: {\n//       width: drawerWidth / 2,\n//       maxWidth: drawerWidth / 2\n//     },\n//     [theme.breakpoints.down(\"sm\")]: {\n//       marginRight: \"-40px\"\n//     },\n//     display: \"flex\",\n//     alignItems: \"center\",\n//     overflow: \"auto\",\n//     height: \"100%\"\n//   },\n//   wrapper: {\n//     width: \"100%\",\n//     height: \"calc(100vh - 208px)\",\n//     zIndex: 1,\n//     display: \"flex\",\n//     position: \"relative\",\n//     overflow: \"hidden\",\n//     maxWidth: \"100%\",\n//     flexDirection: \"row\"\n//   },\n//   main: {\n//     [theme.breakpoints.up(\"md\")]: {\n//       width: \"calc(100% - 240px)\"\n//     }\n//   },\n//   content: {\n//     flexGrow: 1,\n//     backgroundColor: theme.palette.background.default,\n//     padding: theme.spacing(1),\n//     minWidth: 0,\n//     height: \"calc(100% - 75px)\",\n//     boxSizing: \"border-box\",\n//     flex: 1,\n//     position: \"relative\",\n//     overflowX: \"hidden\",\n//     overflowY: \"auto\"\n//   },\n//   conversation: {\n//     boxSizing: \"border-box\",\n//     width: \"100%\",\n//     marginBottom: theme.spacing(1) * 2,\n//     [theme.breakpoints.down(\"sm\")]: {\n//       padding: `0 ${theme.spacing(1) * 1}px`\n//     },\n//     [theme.breakpoints.up(\"sm\")]: {\n//       padding: `0 ${theme.spacing(1) * 3}px`\n//     },\n//     display: \"flex\"\n//   },\n//   conversationSent: {\n//     justifyContent: \"flex-end\"\n//   },\n//   body: {\n//     position: \"relative\",\n//     padding: \".625rem 1rem\",\n//     backgroundColor: theme.palette.primary.main,\n//     borderRadius: theme.shape.borderRadius,\n//     boxShadow: theme.shadows[1],\n//     color: \"white\"\n//   },\n//   bodyReceived: {\n//     \"&::after\": {\n//       position: \"absolute\",\n//       top: 0,\n//       width: 0,\n//       height: 0,\n//       content: '\"\"',\n//       border: `5px solid ${theme.palette.primary.main}`,\n//       borderBottomColor: \"transparent\",\n//       left: \"-7px\",\n//       borderLeftColor: \"transparent\"\n//     }\n//   },\n//   bodySent: {\n//     position: \"relative\",\n//     backgroundColor: theme.palette.secondary.main,\n//     float: \"right\",\n//     order: 1,\n//     \"&::after\": {\n//       position: \"absolute\",\n//       bottom: 0,\n//       width: 0,\n//       height: 0,\n//       content: '\"\"',\n//       border: `5px solid ${theme.palette.secondary.main}`,\n//       borderTopColor: \"transparent\",\n//       borderRightColor: \"transparent\",\n//       right: \"-7px\"\n//     }\n//   },\n//   date: {\n//     display: \"block\",\n//     fontSize: \"11px\",\n//     paddingTop: \"2px\",\n//     fontStyle: \"italic\",\n//     fontWeight: \"600\",\n//     color: theme.palette.primary.contrastText\n//   },\n//   dateSent: {\n//     textAlign: \"right\"\n//   },\n//   input: {\n//     flex: \"1 1 0%\",\n//     boxSizing: \"border-box\"\n//   }\n// }));\n// const Chat = () => {\n//   const classes = useStyles();\n//   const [opened, setOpened] = useState(false);\n//   const handleDrawerToggle = () => setOpened(!opened);\n//   const menu = (\n//     <List subheader={<ListSubheader disableSticky>Contacts</ListSubheader>}>\n//       {mockContacts.map((contact, index) => (\n//         <ListItem key={index} button>\n//           {contact.avatar}\n//           <ListItemText\n//             primary={contact.name}\n//             secondary={contact.status}\n//             inset\n//           />\n//         </ListItem>\n//       ))}\n//     </List>\n//   );\n//   return (\n//     <Wrapper padding={false}>\n//       <AppBar position=\"static\">\n//         <Toolbar />\n//         <Toolbar />\n//       </AppBar>\n//       <Grid container spacing={0} justify={\"center\"} className={classes.header}>\n//         <Grid item xs={11} sm={11} md={10} lg={9}>\n//           <Card>\n//             <div className={classes.root}>\n//               <AppBar\n//                 position=\"absolute\"\n//                 className={classes.appBar}\n//                 color=\"default\"\n//               >\n//                 <Toolbar className={classes.toolBar}>\n//                   <Hidden mdUp>\n//                     <IconButton\n//                       color=\"inherit\"\n//                       aria-label=\"open drawer\"\n//                       onClick={() => handleDrawerToggle()}\n//                     >\n//                       <MenuIcon />\n//                     </IconButton>\n//                   </Hidden>\n//                   <div className={classes.headerLeft}>\n//                     <Avatar\n//                       alt=\"\"\n//                       src={`${process.env.PUBLIC_URL}/static/images/face1.jpg`}\n//                     />\n//                   </div>\n//                   <List dense>\n//                     <ListItem>\n//                       <Avatar\n//                         alt=\"\"\n//                         src={`${process.env.PUBLIC_URL}/static/images/face2.jpg`}\n//                       />\n//                       <ListItemText primary=\"Bobby\" secondary=\"Online\" />\n//                     </ListItem>\n//                   </List>\n//                   <span className=\"flexSpacer\" />\n//                   <IconButton color=\"inherit\">\n//                     <MoreVertIcon />\n//                   </IconButton>\n//                 </Toolbar>\n//               </AppBar>\n//               <div className={classes.wrapper}>\n//                 <Hidden smDown>\n//                   <Drawer\n//                     variant=\"permanent\"\n//                     ModalProps={{\n//                       keepMounted: false,\n//                       className: classes.modal,\n//                       BackdropProps: {\n//                         className: classes.backdrop\n//                       },\n//                       onBackdropClick: handleDrawerToggle\n//                     }}\n//                     classes={{\n//                       paper: classes.drawerPaper\n//                     }}\n//                   >\n//                     {menu}\n//                   </Drawer>\n//                 </Hidden>\n//                 <Hidden mdUp>\n//                   <Drawer\n//                     variant=\"temporary\"\n//                     open={opened}\n//                     ModalProps={{\n//                       keepMounted: false,\n//                       className: classes.modal,\n//                       BackdropProps: {\n//                         className: classes.backdrop\n//                       },\n//                       onBackdropClick: handleDrawerToggle\n//                     }}\n//                     classes={{\n//                       paper: classes.drawerPaper\n//                     }}\n//                   >\n//                     {menu}\n//                   </Drawer>\n//                 </Hidden>\n//                 <main className={classes.main}>\n//                   <div className={classes.content}>\n//                     {mockChats.map((chat, index) => (\n//                       <div\n//                         key={index}\n//                         className={classNames(\n//                           classes.conversation,\n//                           chat.type === \"sent\"\n//                             ? classes.conversationSent\n//                             : classes.conversationReceived\n//                         )}\n//                       >\n//                         <div\n//                           className={classNames(\n//                             classes.body,\n//                             chat.type === \"sent\"\n//                               ? classes.bodySent\n//                               : classes.bodyReceived\n//                           )}\n//                         >\n//                           <Typography color=\"inherit\">\n//                             {chat.message}\n//                           </Typography>\n//                           <Typography\n//                             variant=\"caption\"\n//                             className={classNames(\n//                               classes.date,\n//                               chat.type === \"sent\"\n//                                 ? classes.dateSent\n//                                 : classes.dateReceived\n//                             )}\n//                           >\n//                             {formatDistanceToNow(chat.date)}\n//                           </Typography>\n//                         </div>\n//                       </div>\n//                     ))}\n//                   </div>\n//                   <Divider />\n//                   <div className=\"px-2\">\n//                     <Grid\n//                       container\n//                       spacing={0}\n//                       justify={\"center\"}\n//                       alignItems={\"center\"}\n//                     >\n//                       <TextField\n//                         label=\"Write a message\"\n//                         type=\"text\"\n//                         margin=\"normal\"\n//                         className={classes.input}\n//                       />\n//                       <Fab\n//                         color=\"primary\"\n//                         aria-label=\"send\"\n//                         className={classes.button}\n//                       >\n//                         <SendIcon />\n//                       </Fab>\n//                     </Grid>\n//                   </div>\n//                 </main>\n//               </div>\n//             </div>\n//           </Card>\n//         </Grid>\n//       </Grid>\n//     </Wrapper>\n//   );\n// };\n// export default Chat;","map":{"version":3,"sources":["C:/Users/HorchiAbla/Desktop/dashboard1/src/pages/Apps/Chat.js"],"names":[],"mappingssourcesContent":["// import React, { useState } from \"react\";\n// import { mockChats, mockContacts } from \"../../utils/mock\";\n\n// import AppBar from \"@material-ui/core/AppBar\";\n// import Avatar from \"@material-ui/core/Avatar\";\n// import Card from \"@material-ui/core/Card\";\n// import Divider from \"@material-ui/core/Divider\";\n// import Drawer from \"@material-ui/core/Drawer\";\n// import Fab from \"@material-ui/core/Fab\";\n// import Grid from \"@material-ui/core/Grid\";\n// import Hidden from \"@material-ui/core/Hidden\";\n// import IconButton from \"@material-ui/core/IconButton\";\n// import List from \"@material-ui/core/List\";\n// import ListItem from \"@material-ui/core/ListItem\";\n// import ListItemText from \"@material-ui/core/ListItemText\";\n// import ListSubheader from \"@material-ui/core/ListSubheader\";\n// import MenuIcon from \"@material-ui/icons/Menu\";\n// import MoreVertIcon from \"@material-ui/icons/MoreVert\";\n// import SendIcon from \"@material-ui/icons/Send\";\n// import TextField from \"@material-ui/core/TextField\";\n// import Toolbar from \"@material-ui/core/Toolbar\";\n// import Typography from \"@material-ui/core/Typography\";\n// import { Wrapper } from \"../../components\";\n// import classNames from \"classnames\";\n// import { drawerWidth } from \"../../styleVariables\";\n// import formatDistanceToNow from 'date-fns/formatDistanceToNow'\n// import { makeStyles } from \"@material-ui/core/styles\";\n\n// const useStyles = makeStyles(theme => ({\n//   root: {\n//     zIndex: 1,\n//     overflow: \"hidden\",\n//     position: \"relative\"\n//   },\n//   header: {\n//     marginTop: \"-72px\",\n//     padding: \"8px\"\n//   },\n//   appBar: {\n//     zIndex: theme.zIndex.drawer + 1,\n//     position: \"relative\",\n//     boxShadow: \"0 1px 8px rgba(0,0,0,.3)\"\n//   },\n//   toolBar: {\n//     [theme.breakpoints.down(\"sm\")]: {\n//       paddingLeft: theme.spacing(1) / 2,\n//       paddingRight: theme.spacing(1) / 2\n//     }\n//   },\n//   drawerPaper: {\n//     position: \"relative\",\n//     width: drawerWidth,\n//     maxWidth: drawerWidth,\n//     overflow: \"auto\",\n//     height: \"100%\"\n//   },\n//   modal: {\n//     [theme.breakpoints.down(\"sm\")]: {\n//       top: \"56px\"\n//     },\n//     [theme.breakpoints.up(\"sm\")]: {\n//       top: \"64px\"\n//     },\n//     zIndex: \"1000\"\n//   },\n//   backdrop: {\n//     [theme.breakpoints.down(\"sm\")]: {\n//       top: \"56px\"\n//     },\n//     [theme.breakpoints.up(\"sm\")]: {\n//       top: \"64px\"\n//     }\n//   },\n//   headerLeft: {\n//     position: \"relative\",\n//     [theme.breakpoints.up(\"md\")]: {\n//       width: drawerWidth,\n//       maxWidth: drawerWidth\n//     },\n//     [theme.breakpoints.up(\"sm\")]: {\n//       width: drawerWidth / 2,\n//       maxWidth: drawerWidth / 2\n//     },\n//     [theme.breakpoints.down(\"sm\")]: {\n//       marginRight: \"-40px\"\n//     },\n//     display: \"flex\",\n//     alignItems: \"center\",\n//     overflow: \"auto\",\n//     height: \"100%\"\n//   },\n//   wrapper: {\n//     width: \"100%\",\n//     height: \"calc(100vh - 208px)\",\n//     zIndex: 1,\n//     display: \"flex\",\n//     position: \"relative\",\n//     overflow: \"hidden\",\n//     maxWidth: \"100%\",\n//     flexDirection: \"row\"\n//   },\n//   main: {\n//     [theme.breakpoints.up(\"md\")]: {\n//       width: \"calc(100% - 240px)\"\n//     }\n//   },\n//   content: {\n//     flexGrow: 1,\n//     backgroundColor: theme.palette.background.default,\n//     padding: theme.spacing(1),\n//     minWidth: 0,\n//     height: \"calc(100% - 75px)\",\n//     boxSizing: \"border-box\",\n//     flex: 1,\n//     position: \"relative\",\n//     overflowX: \"hidden\",\n//     overflowY: \"auto\"\n//   },\n//   conversation: {\n//     boxSizing: \"border-box\",\n//     width: \"100%\",\n//     marginBottom: theme.spacing(1) * 2,\n//     [theme.breakpoints.down(\"sm\")]: {\n//       padding: `0 ${theme.spacing(1) * 1}px`\n//     },\n//     [theme.breakpoints.up(\"sm\")]: {\n//       padding: `0 ${theme.spacing(1) * 3}px`\n//     },\n//     display: \"flex\"\n//   },\n//   conversationSent: {\n//     justifyContent: \"flex-end\"\n//   },\n//   body: {\n//     position: \"relative\",\n//     padding: \".625rem 1rem\",\n//     backgroundColor: theme.palette.primary.main,\n//     borderRadius: theme.shape.borderRadius,\n//     boxShadow: theme.shadows[1],\n//     color: \"white\"\n//   },\n//   bodyReceived: {\n//     \"&::after\": {\n//       position: \"absolute\",\n//       top: 0,\n//       width: 0,\n//       height: 0,\n//       content: '\"\"',\n//       border: `5px solid ${theme.palette.primary.main}`,\n//       borderBottomColor: \"transparent\",\n//       left: \"-7px\",\n//       borderLeftColor: \"transparent\"\n//     }\n//   },\n//   bodySent: {\n//     position: \"relative\",\n//     backgroundColor: theme.palette.secondary.main,\n//     float: \"right\",\n//     order: 1,\n//     \"&::after\": {\n//       position: \"absolute\",\n//       bottom: 0,\n//       width: 0,\n//       height: 0,\n//       content: '\"\"',\n//       border: `5px solid ${theme.palette.secondary.main}`,\n//       borderTopColor: \"transparent\",\n//       borderRightColor: \"transparent\",\n//       right: \"-7px\"\n//     }\n//   },\n//   date: {\n//     display: \"block\",\n//     fontSize: \"11px\",\n//     paddingTop: \"2px\",\n//     fontStyle: \"italic\",\n//     fontWeight: \"600\",\n//     color: theme.palette.primary.contrastText\n//   },\n//   dateSent: {\n//     textAlign: \"right\"\n//   },\n//   input: {\n//     flex: \"1 1 0%\",\n//     boxSizing: \"border-box\"\n//   }\n// }));\n\n// const Chat = () => {\n//   const classes = useStyles();\n//   const [opened, setOpened] = useState(false);\n\n//   const handleDrawerToggle = () => setOpened(!opened);\n\n//   const menu = (\n//     <List subheader={<ListSubheader disableSticky>Contacts</ListSubheader>}>\n//       {mockContacts.map((contact, index) => (\n//         <ListItem key={index} button>\n//           {contact.avatar}\n//           <ListItemText\n//             primary={contact.name}\n//             secondary={contact.status}\n//             inset\n//           />\n//         </ListItem>\n//       ))}\n//     </List>\n//   );\n//   return (\n//     <Wrapper padding={false}>\n//       <AppBar position=\"static\">\n//         <Toolbar />\n//         <Toolbar />\n//       </AppBar>\n\n//       <Grid container spacing={0} justify={\"center\"} className={classes.header}>\n//         <Grid item xs={11} sm={11} md={10} lg={9}>\n//           <Card>\n//             <div className={classes.root}>\n//               <AppBar\n//                 position=\"absolute\"\n//                 className={classes.appBar}\n//                 color=\"default\"\n//               >\n//                 <Toolbar className={classes.toolBar}>\n//                   <Hidden mdUp>\n//                     <IconButton\n//                       color=\"inherit\"\n//                       aria-label=\"open drawer\"\n//                       onClick={() => handleDrawerToggle()}\n//                     >\n//                       <MenuIcon />\n//                     </IconButton>\n//                   </Hidden>\n//                   <div className={classes.headerLeft}>\n//                     <Avatar\n//                       alt=\"\"\n//                       src={`${process.env.PUBLIC_URL}/static/images/face1.jpg`}\n//                     />\n//                   </div>\n//                   <List dense>\n//                     <ListItem>\n//                       <Avatar\n//                         alt=\"\"\n//                         src={`${process.env.PUBLIC_URL}/static/images/face2.jpg`}\n//                       />\n//                       <ListItemText primary=\"Bobby\" secondary=\"Online\" />\n//                     </ListItem>\n//                   </List>\n//                   <span className=\"flexSpacer\" />\n//                   <IconButton color=\"inherit\">\n//                     <MoreVertIcon />\n//                   </IconButton>\n//                 </Toolbar>\n//               </AppBar>\n//               <div className={classes.wrapper}>\n//                 <Hidden smDown>\n//                   <Drawer\n//                     variant=\"permanent\"\n//                     ModalProps={{\n//                       keepMounted: false,\n//                       className: classes.modal,\n//                       BackdropProps: {\n//                         className: classes.backdrop\n//                       },\n//                       onBackdropClick: handleDrawerToggle\n//                     }}\n//                     classes={{\n//                       paper: classes.drawerPaper\n//                     }}\n//                   >\n//                     {menu}\n//                   </Drawer>\n//                 </Hidden>\n//                 <Hidden mdUp>\n//                   <Drawer\n//                     variant=\"temporary\"\n//                     open={opened}\n//                     ModalProps={{\n//                       keepMounted: false,\n//                       className: classes.modal,\n//                       BackdropProps: {\n//                         className: classes.backdrop\n//                       },\n//                       onBackdropClick: handleDrawerToggle\n//                     }}\n//                     classes={{\n//                       paper: classes.drawerPaper\n//                     }}\n//                   >\n//                     {menu}\n//                   </Drawer>\n//                 </Hidden>\n//                 <main className={classes.main}>\n//                   <div className={classes.content}>\n//                     {mockChats.map((chat, index) => (\n//                       <div\n//                         key={index}\n//                         className={classNames(\n//                           classes.conversation,\n//                           chat.type === \"sent\"\n//                             ? classes.conversationSent\n//                             : classes.conversationReceived\n//                         )}\n//                       >\n//                         <div\n//                           className={classNames(\n//                             classes.body,\n//                             chat.type === \"sent\"\n//                               ? classes.bodySent\n//                               : classes.bodyReceived\n//                           )}\n//                         >\n//                           <Typography color=\"inherit\">\n//                             {chat.message}\n//                           </Typography>\n//                           <Typography\n//                             variant=\"caption\"\n//                             className={classNames(\n//                               classes.date,\n//                               chat.type === \"sent\"\n//                                 ? classes.dateSent\n//                                 : classes.dateReceived\n//                             )}\n//                           >\n//                             {formatDistanceToNow(chat.date)}\n//                           </Typography>\n//                         </div>\n//                       </div>\n//                     ))}\n//                   </div>\n//                   <Divider />\n//                   <div className=\"px-2\">\n//                     <Grid\n//                       container\n//                       spacing={0}\n//                       justify={\"center\"}\n//                       alignItems={\"center\"}\n//                     >\n//                       <TextField\n//                         label=\"Write a message\"\n//                         type=\"text\"\n//                         margin=\"normal\"\n//                         className={classes.input}\n//                       />\n//                       <Fab\n//                         color=\"primary\"\n//                         aria-label=\"send\"\n//                         className={classes.button}\n//                       >\n//                         <SendIcon />\n//                       </Fab>\n//                     </Grid>\n//                   </div>\n//                 </main>\n//               </div>\n//             </div>\n//           </Card>\n//         </Grid>\n//       </Grid>\n//     </Wrapper>\n//   );\n// };\n\n// export default Chat;\n"]},"metadata":{},"sourceType":"module"}